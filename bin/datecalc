#!/usr/bin/perl

use 5.010;
use strict;
use warnings;

use App::datecalc;
use Getopt::Long;
use Term::ReadLine;

# VERSION
# DATE

sub get_options {
    my %opts;
    GetOptions(
        '--help|h|?', \$opts{help},
        '--version|v', \$opts{version},

    );

    if ($opts{help}) {
        print <<_;
Usage:
  datecalc [OPTIONS]

Options:
  --help, -h, -?
  --version, -v
_
        exit 0;
    } elsif ($opts{version}) {
        say "datecalc version $::VERSION";
        exit 0;
    }
}

sub eval_loop {
    my $calc = App::datecalc->new;
    my $term = Term::ReadLine->new('datecalc');
    my $prompt = "> ";
    my $OUT = $term->OUT || \*STDOUT;

    while ( defined ($_ = $term->readline($prompt)) ) {
        my $res;
        eval { $res = $calc->eval($_) };
        if ($@) {
            warn "Error: $@\n";
        } else {
            print $OUT $res, "\n";
        }
        $term->addhistory($_) if /\S/;
    }
}

### main

get_options();
eval_loop();

# ABSTRACT: Date calculations
# PODNAME: datecalc

=head1 SYNOPSIS

 % datecalc

 > today
 2014-05-13

 > tomorrow
 2014-05-14

 > today + 2 days
 2014-05-15

 > 2014-05-13 - 2014-02-14
 P2M3W6D

 > 2 months 3 weeks 6 days
 P2M3W6D

 > P10D
 P1W3D

 > 2014-05-13 + P2D
 2014-05-15

 > 2 * 2 days 10 hours
 P4DT20H

 > P10D / 2
 P5D

 > 6d + 8d + 13 min
 P2WT13M


=head1 DESCRIPTION

This is a command-line utility to perform date calculations.

For now, for more details, see L<App::datecalc>.

